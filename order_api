<?php
session_start();
header("Content-Type: application/json");
require_once "db_conn.php"; // This sets up $pdo

if (!isset($_SESSION['user_id'])) {
    echo json_encode(["status" => "error", "message" => "Unauthorized access"]);
    exit();
}

$user_id = $_SESSION['user_id'];
$action = $_GET['action'] ?? '';

$response = ["status" => "error", "message" => "Invalid request"];

// --- PLACE ORDER ---
if ($action === "place_order") {
    try {
        $pdo->beginTransaction();

        // Get cart items
        $cartStmt = $pdo->prepare("SELECT product_id, quantity FROM cart WHERE user_id = ?");
        $cartStmt->execute([$user_id]);
        $cartItems = $cartStmt->fetchAll(PDO::FETCH_ASSOC);

        if (!$cartItems) {
            echo json_encode(["status" => "error", "message" => "Your cart is empty."]);
            exit();
        }

        $orderIds = [];
        foreach ($cartItems as $item) {
            // Get product price
            $prodStmt = $pdo->prepare("SELECT price, name FROM products WHERE id = ?");
            $prodStmt->execute([$item['product_id']]);
            $product = $prodStmt->fetch(PDO::FETCH_ASSOC);
            if (!$product) {
                throw new Exception("Product not found (ID: {$item['product_id']})");
            }
            $total_price = $item['quantity'] * $product['price'];

            // Insert order row
            $orderStmt = $pdo->prepare("INSERT INTO orders (user_id, product_id, quantity, total_price, status) VALUES (?, ?, ?, ?, 'Pending')");
            $orderStmt->execute([$user_id, $item['product_id'], $item['quantity'], $total_price]);
            $orderIds[] = $pdo->lastInsertId();
        }

        // Clear cart
        $clearCart = $pdo->prepare("DELETE FROM cart WHERE user_id = ?");
        $clearCart->execute([$user_id]);

        $pdo->commit();
        $response = [
            "status" => "success",
            "message" => "Order placed successfully",
            "order_ids" => $orderIds
        ];
    } catch (Exception $e) {
        $pdo->rollBack();
        error_log("Order placement error: " . $e->getMessage());
        $response = ["status" => "error", "message" => "Order placement failed: " . $e->getMessage()];
    }
}

// --- VIEW ORDERS ---
elseif ($action === "view_orders") {
    try {
        $query = "SELECT 
                    orders.id AS order_id,
                    orders.created_at AS date,
                    products.name AS item_name,
                    orders.quantity,
                    orders.total_price,
                    orders.status
                  FROM orders
                  JOIN products ON orders.product_id = products.id
                  WHERE orders.user_id = ?
                  ORDER BY orders.created_at DESC";
        $stmt = $pdo->prepare($query);
        $stmt->execute([$user_id]);
        $orders = [];
        while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
            // Format date for display if needed
            $row['date'] = date("Y-m-d H:i", strtotime($row['date']));
            // Combine quantity and name for display
            $row['items'] = "{$row['quantity']} x {$row['item_name']}";
            unset($row['item_name'], $row['quantity']);
            $orders[] = $row;
        }
        $response = ["status" => "success", "orders" => $orders];
    } catch (Exception $e) {
        error_log("View orders error: " . $e->getMessage());
        $response = ["status" => "error", "message" => "Could not fetch orders"];
    }
}

echo json_encode($response);
?>
