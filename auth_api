<?php
require_once "config.php"; // Database connection

header("Content-Type: application/json");
session_start(); // Always start session at the top

$method = $_SERVER['REQUEST_METHOD'];

if ($method === "POST") {
    $action = isset($_POST['action']) ? $_POST['action'] : '';

    switch ($action) {
        case "register":
            registerUser();
            break;
        case "login":
            loginUser();
            break;
        case "update_profile":
            updateProfile();
            break;
        default:
            echo json_encode(["status" => "error", "message" => "Invalid action"]);
    }
} else {
    echo json_encode(["status" => "error", "message" => "Invalid request method"]);
}

function registerUser() {
    global $conn;
    $name     = trim($_POST['name'] ?? '');
    $email    = filter_var($_POST['email'] ?? '', FILTER_VALIDATE_EMAIL);
    $password = $_POST['password'] ?? '';

    if (!$email) {
        echo json_encode(["status" => "error", "message" => "Invalid email address"]);
        return;
    }
    if (strlen($name) < 2 || strlen($name) > 50) {
        echo json_encode(["status" => "error", "message" => "Name must be between 2 and 50 characters"]);
        return;
    }
    if (strlen($password) < 6) {
        echo json_encode(["status" => "error", "message" => "Password must be at least 6 characters"]);
        return;
    }

    // Check for duplicate email
    $checkUser = $conn->prepare("SELECT id FROM users WHERE email = ?");
    $checkUser->execute([$email]);
    if ($checkUser->rowCount() > 0) {
        echo json_encode(["status" => "error", "message" => "Email already exists"]);
        return;
    }

    $passwordHash = password_hash($password, PASSWORD_BCRYPT);

    $stmt = $conn->prepare("INSERT INTO users (name, email, password) VALUES (?, ?, ?)");
    if ($stmt->execute([$name, $email, $passwordHash])) {
        echo json_encode(["status" => "success", "message" => "User registered successfully"]);
    } else {
        echo json_encode(["status" => "error", "message" => "Registration failed"]);
    }
}

function loginUser() {
    global $conn;
    $email    = filter_var($_POST['email'] ?? '', FILTER_VALIDATE_EMAIL);
    $password = $_POST['password'] ?? '';

    if (!$email || !$password) {
        echo json_encode(["status" => "error", "message" => "Invalid email or password"]);
        return;
    }

    $stmt = $conn->prepare("SELECT id, name, email, password FROM users WHERE email = ?");
    $stmt->execute([$email]);
    $user = $stmt->fetch(PDO::FETCH_ASSOC);

    if ($user && password_verify($password, $user['password'])) {
        $_SESSION['user_id'] = $user['id'];
        unset($user['password']); // Remove password hash before sending to client
        echo json_encode(["status" => "success", "message" => "Login successful", "user" => $user]);
    } else {
        echo json_encode(["status" => "error", "message" => "Invalid credentials"]);
    }
}

function updateProfile() {
    global $conn;
    if (!isset($_SESSION['user_id'])) {
        echo json_encode(["status" => "error", "message" => "Unauthorized access"]);
        return;
    }
    $userId = $_SESSION['user_id'];
    $name   = trim($_POST['name'] ?? '');
    $email  = filter_var($_POST['email'] ?? '', FILTER_VALIDATE_EMAIL);

    if (!$email) {
        echo json_encode(["status" => "error", "message" => "Invalid email address"]);
        return;
    }
    if (strlen($name) < 2 || strlen($name) > 50) {
        echo json_encode(["status" => "error", "message" => "Name must be between 2 and 50 characters"]);
        return;
    }

    // Check if new email is already in use by another user
    $check = $conn->prepare("SELECT id FROM users WHERE email = ? AND id != ?");
    $check->execute([$email, $userId]);
    if ($check->rowCount() > 0) {
        echo json_encode(["status" => "error", "message" => "Email already in use"]);
        return;
    }

    $stmt = $conn->prepare("UPDATE users SET name = ?, email = ? WHERE id = ?");
    if ($stmt->execute([$name, $email, $userId])) {
        echo json_encode(["status" => "success", "message" => "Profile updated successfully"]);
    } else {
        echo json_encode(["status" => "error", "message" => "Profile update failed"]);
    }
}
?>
